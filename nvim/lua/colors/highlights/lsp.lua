-- -- https://neovim.io/doc/user/lsp.html
--
-- local c = require("colors/colors")
-- local u = require("colors/utilities")
--
-- -- -- @lsp.type.class: Identifiers that declare or reference a class type
-- -- @lsp.type.class
-- --
-- -- -- @lsp.type.comment: Tokens that represent a comment
-- -- @lsp.type.comment
-- --
-- -- -- @lsp.type.decorator: Identifiers that declare or reference decorators and annotations
-- -- @lsp.type.decorator
-- --
-- -- -- @lsp.type.enum: Identifiers that declare or reference an enumeration type
-- -- @lsp.type.enum
-- --
-- -- -- @lsp.type.enumMember: Identifiers that declare or reference an enumeration property, constant, or member
-- -- @lsp.type.enumMember
-- --
-- -- -- @lsp.type.event: Identifiers that declare an event property
-- -- @lsp.type.event
--
-- -- @lsp.type.function: Identifiers that declare a function
-- u.cmd("hi! link @lsp.type.function @function")
--
-- -- -- @lsp.type.interface: Identifiers that declare or reference an interface type
-- -- @lsp.type.interface
-- --
-- -- -- @lsp.type.keyword: Tokens that represent a language keyword
-- -- @lsp.type.keyword
--
-- -- @lsp.type.macro: Identifiers that declare a macro
-- u.cmd("hi! link @lsp.type.macro Macro")
--
-- -- @lsp.type.method: Identifiers that declare a member function or method
-- u.cmd("hi! link @lsp.type.method @function.method")
--
-- -- -- @lsp.type.modifier: Tokens that represent a modifier
-- -- @lsp.type.modifier
--
-- -- @lsp.type.namespace: Identifiers that declare or reference a namespace, module, or package
-- u.cmd("hi! link @lsp.type.namespace @module")
--
-- -- @lsp.type.number: Tokens that represent a number literal
-- u.cmd("hi! link @lsp.type.number @number")
--
-- -- @lsp.type.operator: Tokens that represent an operator
-- u.cmd("hi! link @lsp.type.operator @operator")
--
-- -- @lsp.type.parameter: Identifiers that declare or reference a function or method parameters
-- u.cmd("hi! link @lsp.type.parameter @variable.parameter")
--
-- -- @lsp.type.property: Identifiers that declare or reference a member property, member field, or member variable
-- u.cmd("hi! link @lsp.type.property @property")
--
-- -- @lsp.type.regexp: Tokens that represent a regular expression literal
-- u.cmd("hi! link @lsp.type.regexp @string.regexp")
--
-- -- @lsp.type.string: Tokens that represent a string literal
-- u.cmd("hi! link @lsp.type.string @string")
--
-- -- -- @lsp.type.struct: Identifiers that declare or reference a struct type
-- -- @lsp.type.struct
--
-- -- @lsp.type.type: Identifiers that declare or reference a type that is not covered above
-- u.cmd("hi! link @lsp.type.type @type")
--
-- -- -- @lsp.type.typeParameter: Identifiers that declare or reference a type parameter
-- -- @lsp.type.typeParameter
--
-- -- @lsp.type.variable: Identifiers that declare or reference a local or global variable
-- u.cmd("hi! link @lsp.type.variable @variable")
--
-- -- -- @lsp.mod.abstract: Types and member functions that are abstract @lsp.mod.async Functions that are marked async @lsp.mod.declaration Declarations of symbols @lsp.mod.defaultLibrary Symbols that are part of the standard library @lsp.mod.definition Definitions of symbols, for example, in header files @lsp.mod.deprecated Symbols that should no longer be used @lsp.mod.documentation Occurrences of symbols in documentation @lsp.mod.modification Variable references where the variable is assigned to @lsp.mod.readonly Readonly variables and member fields (constants) @lsp.mod.static Class members (static members) 
-- -- @lsp.mod.abstract
